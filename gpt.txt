.....F..F........FF...F..FUnknown piece type: X
...F.......
======================================================================
FAIL: test_initialize_board (test.TestChess3D)
Tests that the board initializes with the correct number of pieces.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/gideon/projects/tmp/3D-chess/test.py", line 463, in test_initialize_board
    self.assertEqual(total_pieces, expected_pieces)
AssertionError: 56 != 64

======================================================================
FAIL: test_is_clear_path_invalid_movement (test.TestChess3D)
Tests is_clear_path with invalid movement pattern.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/gideon/projects/tmp/3D-chess/test.py", line 347, in test_is_clear_path_invalid_movement
    self.assertFalse(is_clear_path(self.board, (0, 0, 0), (2, 1, 0)))  # Not a straight line or diagonal
AssertionError: True is not false

======================================================================
FAIL: test_knight_valid_moves (test.TestChess3D)
Tests valid knight moves.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/gideon/projects/tmp/3D-chess/test.py", line 152, in test_knight_valid_moves
    self.assertTrue(knight.is_valid_move(move, self.board))
AssertionError: False is not true

======================================================================
FAIL: test_move_piece (test.TestChess3D)
Tests moving a piece on the board.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/gideon/projects/tmp/3D-chess/test.py", line 397, in test_move_piece
    self.assertTrue(self.board.move_piece((0, 0, 0), (0, 3, 0)))
AssertionError: None is not true

======================================================================
FAIL: test_pawn_capture (test.TestChess3D)
Tests that the pawn can capture an opponent's piece diagonally.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/gideon/projects/tmp/3D-chess/test.py", line 63, in test_pawn_capture
    self.assertEqual(pawn.position, (2, 2, 1))
AssertionError: Tuples differ: (1, 1, 1) != (2, 2, 1)

First differing element 0:
1
2

- (1, 1, 1)
?  ^  ^

+ (2, 2, 1)
?  ^  ^


======================================================================
FAIL: test_pawn_move_forward (test.TestChess3D)
Tests that the pawn can move forward one square.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/gideon/projects/tmp/3D-chess/test.py", line 38, in test_pawn_move_forward
    self.assertEqual(pawn.position, (2, 1, 1))
AssertionError: Tuples differ: (1, 1, 1) != (2, 1, 1)

First differing element 0:
1
2

- (1, 1, 1)
+ (2, 1, 1)

======================================================================
FAIL: test_queen_invalid_moves (test.TestChess3D)
Tests invalid queen moves.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/gideon/projects/tmp/3D-chess/test.py", line 239, in test_queen_invalid_moves
    self.assertFalse(queen.is_valid_move((2, 1, 0), self.board))
AssertionError: True is not false

----------------------------------------------------------------------
Ran 37 tests in 5.028s

FAILED (failures=7)
